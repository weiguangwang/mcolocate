

import pandas as pd
import sys
#import preprocess
import pytz
mytz = pytz.timezone('America/New_York')
from datetime import datetime, timedelta

#path = 'F:/20181110_gpsHealth/data/aws_sync/6_cities_201807_201811/'
#processpath = 'F:/20181110_gpsHealth/process/v3/'
path = '/media/wwang/easystore/20181110_gpsHealth/data/aws_sync/6_cities_201807_201811/'
processpath = '/media/wwang/easystore/20181110_gpsHealth/process/v3/'
path = 'F:/20181110_gpsHealth/data/aws_sync/6_cities_201807_201811/'
processpath = 'F:/20181110_gpsHealth/process/v3/'


#the strategy of hourly_v1.py: if a row covers a certain hour, then that hour is addded as a record (row) in the hourly 
#data. This could result in multiple records for one hour, which should be taken care of in the next steps.

#because I need to calculate the average speed, all POIs for a certain hour, it cannot be easily grouped by taking average. 
#more importantly, multiple locations in a certain hour cannot be merged at this step because it is needed to recoganize family members being together. 

cities = ['wilmington','chattanooga','charleston','savanna','knoxville','newport_news']
cities_placeID = ['wilmington','savanna','newport_news']
cols4use_poi = ['advertiser_id', 'longitude', 'latitude', 'timestay', 'dist_next','location_at', 'speed', 'athome', 'dist_home','familySize', 'placeID', 'nearestDist']
cols4use = ['advertiser_id', 'longitude', 'latitude', 'timestay', 'dist_next','location_at', 'speed', 'athome', 'dist_home','familySize']

temp = pd.read_excel(processpath+'datedict_v1.xlsx')     # datedict_v1.xlsx and iddict_v1.xlsx are both generated by id_date_convert_v1.py
datedict = dict(zip(temp['date'],temp['date_convertedid']))
del temp

for city in cities:
    print('working on: ',city)
    data = pd.read_csv(processpath+'%s_07_11_both_valid10_abouthome_placeID_simpleid_familySize.csv'%city)
    data = data.loc[data['timestay']<=24*3600]
    print('starttime')
    data['starttime']=data['location_at'].apply(lambda x:datetime.fromtimestamp(x,tz=mytz))
    print('endtime')
    data['endtime']=(data['location_at']+data['timestay']).apply(lambda x:datetime.fromtimestamp(x,tz=mytz))
    print('data loaded')
    
    starthour = data['starttime'].dt.hour.tolist()
    endhour = data['endtime'].dt.hour.tolist()
    startdate = data['starttime'].dt.date.tolist()
    enddate = data['endtime'].dt.date.tolist()
    advertiser_id = data['advertiser_id'].tolist()
    athome = data['athome'].tolist()
    dist_home = data['dist_home'].tolist()
    familySize = data['familySize'].tolist()
    speed = data['speed'].tolist()
    longitude = data['longitude'].tolist()
    latitude = data['latitude'].tolist()
    
    idlist = []
    hourlist = []
    datelist = []
    athomelist = []
    dist_homelist = []
    familySizelist = []
    speedlist = []
    longitudesnew =[]
    latitudesnew = []
    
    if city in cities_placeID:
        placeID = data['placeID'].tolist()
        nearestDist = data['nearestDist'].tolist() # distance to nearest poi/placeID
        
        placeIDlist = []
        nearestDistList = []
        
    totalNum = data.shape[0]
    del data
    for i in range(totalNum):
        sys.stdout.write('\r==%s/%s===\r'%(i+1,totalNum))
        id = advertiser_id[i]
        starthour_i = starthour[i]
        endhour_i = endhour[i]
        startdate_i = datedict[str(startdate[i])]
        enddate_i = datedict[str(enddate[i])]
        athomestatus = athome[i]
        dist_home_i=dist_home[i]
        familySize_i = familySize[i]
        speed_i=speed[i]
        if city in cities_placeID:
            placeID_i = placeID[i]
            nearestDist_i = nearestDist[i]
        
        if startdate_i == enddate_i: #same day
            numhours = endhour_i - starthour_i + 1
            for j in range(numhours):
                idlist.append(id)
                hourlist.append(starthour_i+j)
                datelist.append(startdate_i)
                athomelist.append(athomestatus)
                dist_homelist.append(dist_home_i)
                familySizelist.append(familySize_i)
                speedlist.append(speed_i)
                longitudesnew.append(longitude[i])
                latitudesnew.append(latitude[i])
                if city in cities_placeID:
                    placeIDlist.append(placeID_i)
                    nearestDistList.append(nearestDist_i)
                    
        elif enddate_i - startdate_i == 1:
            numhours = endhour_i - starthour_i + 1 + 24
            for j in range(numhours):
                if j + starthour_i > 23:
                    idlist.append(id)
                    hourlist.append(starthour_i+j-24)
                    datelist.append(startdate_i+1)
                    athomelist.append(athomestatus)
                    dist_homelist.append(dist_home_i)
                    familySizelist.append(familySize_i)
                    speedlist.append(speed_i)
                    longitudesnew.append(longitude[i])
                    latitudesnew.append(latitude[i])
                    if city in cities_placeID:
                        placeIDlist.append(placeID_i)
                        nearestDistList.append(nearestDist_i)
                else:
                    idlist.append(id)
                    hourlist.append(starthour_i+j)
                    datelist.append(startdate_i)
                    athomelist.append(athomestatus)
                    dist_homelist.append(dist_home_i)
                    familySizelist.append(familySize_i)
                    speedlist.append(speed_i)
                    longitudesnew.append(longitude[i])
                    latitudesnew.append(latitude[i])
                    if city in cities_placeID:
                        placeIDlist.append(placeID_i)
                        nearestDistList.append(nearestDist_i)
        else:
            print('error 1')
            break
                    
                
    
    del starthour, endhour,startdate,enddate,advertiser_id,athome,dist_home,speed,familySize,latitude,longitude
    data = pd.DataFrame()
    data['advertiser_id'] = idlist
    data['hour'] = hourlist
    data['date'] = datelist
    data['athome'] = athomelist
    data['dist_home'] = dist_homelist
    data['familySize'] = familySizelist
    data['speed'] = speedlist
    data['longitude'] = longitudesnew
    data['latitude'] = latitudesnew
    if city in cities_placeID:
        data['placeID'] = placeIDlist
        data['nearestDist'] = nearestDistList
    
    del idlist,hourlist,datelist,athomelist,dist_homelist,familySizelist,speedlist,longitudesnew,latitudesnew
    print('')
    # data['speed'] = data.groupby(['advertiser_id','hour','date'])['speed'].apply(lambda x: ','.join(x)).reset_index()
    # data['placeID'] = data.groupby(['advertiser_id','hour','date'])['placeID'].apply(lambda x: ','.join(x)).reset_index()
    print('saving')
    data.to_csv(processpath+'%s_07_11_both_valid10_abouthome_placeID_simpleid_familySize_hourly.csv'%city,index=False)
    del data





# cities = ['wilmington','chattanooga','charleston','savanna','knoxville','newport_news']
# cities_placeID = ['wilmington','savanna','newport_news']
# cols4use_poi = ['advertiser_id', 'longitude', 'latitude', 'hour', 'date','athome', 'dist_home', 'familySize', 'speed', 'placeID', 'nearestDist']
# cols4use = ['advertiser_id', 'longitude', 'latitude', 'hour', 'date','athome', 'dist_home', 'familySize', 'speed']



